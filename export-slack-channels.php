#!/usr/bin/php
<?php
define('SLACK_TOKEN', 'TOKEN');
$page = 'it:slack_channels';

/**
 * Decode html entities
 */
function decode($s) {
	return html_entity_decode($s, ENT_QUOTES, 'UTF-8');
}

/**
 * Do custom markup, like eventum issue link -> issue markup
 */
function markup($s) {
	// decode html entities first
	$s = decode($s);

	// use issue markup
	$s = preg_replace('#https://eventum.example.org/view.php\?id=(\d+)#', '[[issue>$1]]', $s);

	// wiki page markup
	$s = preg_replace('#https://wiki.example.org/(\S+)\b#', '[[$1]]', $s);

	// do not allow newlines, use wiki markup
	$s = preg_replace("/\r?\n/", ' \\\\\\\\ ', $s);
	return $s;
}

function slack_api($method, $params = array()) {
	$params['token'] =  SLACK_TOKEN;
	$url = "https://slack.com/api/{$method}?". http_build_query($params, null, '&');

	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_TIMEOUT, 5);
	$res = curl_exec($ch);
	curl_close($ch);
	if (!$res){
		error_log('No response!');
		exit(1);
	}
	$data = json_decode($res);
	if(!$data->ok || $data->ok != true) {
		error_log('Response from API NOT OK: '. var_export($res,1));
		exit(1);
	}
	return $data;
}

/**
 * Fetch channels list from slack api
 */
function get_channels_list() {
	$data = slack_api('channels.list');
	if(!$data->channels || !count($data->channels)){
		error_log('No channels in response!'. var_export($res,1));
		exit(1);
	}
	return $data;
}


/**
 * Format channels list into dokuwiki syntax
 */
function format_channels_list($data) {
	$output = array();

	$tr = function ($data, $separator = "|") {
		array_unshift($data, "");
		array_push($data, "");
		return join($separator, $data);
	};

	$headers = array('Channel Name', 'Channel Purpose', 'Channel Topic', 'FirstÂ Message');

	$output[] = "====== Slack Channels ======\n";
	$output[] = sprintf("\n/* this page is generated by %s, changes will be lost */\n\n", __FILE__);;

	$active = $inactive = array();
	foreach($data->channels as $chan) {
		$topic = markup($chan->topic->value);

		$history = slack_api('channels.history', array('channel' => $chan->id, 'oldest' => 1, 'count' => 1));
		$first_msg = strftime('%Y-%m-%d', $history->messages[0]->ts);

		$row = array(
			'[[https://team.slack.com/messages/' . $chan->name . '|#' . $chan->name . ']]',
			markup($chan->purpose->value),
			$topic,
		   	$first_msg,
		);

		if ($chan->is_archived) {
			$history = slack_api('channels.history', array('channel' => $chan->id, 'count' => 1));
			$last_msg = strftime('%Y-%m-%d', $history->messages[0]->ts);
			$row[] = $last_msg;
			$inactive[] = $tr($row);
		} else {
			$active[] = $tr($row);
		}
	}

	if ($active) {
		$output[] = "\n====== Active Channels ======\n";
		$output[] = $tr($headers, "^");
		$output[] = join("\n", $active);
	}

	if ($inactive) {
		$output[] = "\n====== Archived Channels ======\n";
		$headers[] = 'LastÂ Message';
		$output[] = $tr($headers, "^");
		$output[] = join("\n", $inactive);
	}

	return join("\n", $output);
}

/**
 * commit $contents to $page
 */
function dw_commit($page, $contents, $message) {
	$tmpfile = tempnam(sys_get_temp_dir(), 'sl2dw');
	file_put_contents($tmpfile, $contents);

	$dwpage = '/usr/share/dokuwiki/bin/dwpage.php';
	exec("{$dwpage} commit -m '{$message}' -t {$tmpfile} {$page} 2>&1 | grep -v ^S:");
	unlink($tmpfile);
}

$data = get_channels_list();
$contents = format_channels_list($data);
dw_commit($page, $contents, "updated slack channels info");
